extends Node2D

## 11 урок:
	## setget переменная
	## глобальный скрипт

## Переменная setget - автор её назвал переменной "три в одном".
## Автор рассказывает о том, что _ready, по своей сути не функция, а сигнал, который даёт команду на выполнение своему телу, когда сцена создалась
## _on_day_night_timeout - то же самое. Это автоматически создавшаяся псевдо-функция, начало которой мы дали, когда привязали узел к таймеру в скрипте level
## Ну и morning_state() - уже самописная, которая вызывается нами.
## Рассказывает о том, что тригеры штука ограниченная и приходится применять смекалку, чтобы выжать максимум из имеющихся узлов. Но они не универсальны.
## И тут на помощь приходит setget. Мы её создаём в скрипте злого грибочка под машиной состояний. 3 в одном она оказалась, потому что это переменная
## которая работает как сигнал и функция. И всё одновременно
## 
## Глобальный скрипт позволит ссылаться объектам друг на друга, даже если они изначально не находятся на одной сцене.
## Для того,чтобы реализовать это нам потребуется создать кастомный глобальный скрипт. Создадим его в плеере. Сигнал, который будет отправляться мобам и сигнализировать о том
## где находится игрок.
## Для того, чтобы создать глобальный скрипт нжуно перейти в слева-сверху в проект, автозагрузка. Придумываем короткое и доходчивое название и сохраняем в интересующей директории.
## В нашем случае ею является директория scene, а кастомный сигнал(узел) называется signals. Теперь все сцены имеют к нему доступ. На то он и глобальный.
## Дальнейшая работа будет вестись уже внутри него.

## 12 урок:
## Новая сцена, отвечающая за получение и нанесение урона, новый кастомный сигнал, передающий урон от гриба персонажа + полоска здоровья
## Создаём новую сцену с хитбоксом и дэмэйджбоксом. Привязываем к attack_direction грибочка и включаем редактируемых потомков правым кликом мыши
## Делаем тоже самое и для игрока. Сделали в сцене damage-box хитбокс уникальным, тыкнув на CollisionShape2D и справа в инспекторе, на пункт выбора формы, а там "сделать уникальным"
## Я не совсем понял для чего, но на всякий зафиксировал это тут.
## После правим размер и положение харт и хит боксов у грибочка и игрока согласно анимации спрайта
## Далее заходим в signals, в котором содержатся (пока один, но сейчас это изменится) кастомные глобальные сигналы и добавляем новый
## Добавление кода для сигнала началось, но перед этим переименовываем два слоя: 5 в "playerHurtBox" и 6 в "enemyHurtBox"
## Назначаем коллизию грибочка hurtbox в 6, одноимённый слой, чтобы унифицировать все хартбоксы монстров и его конкретный в данный момент
## Для хитбокса же грибочка не потребуется лэер, а нужна только маска, так как его находить никто не должен, а это он должен находить хартбокс игрока. Собственно его и ставим (5)
## Проворачиваем аналогичную процедуру для коллизий игрока а именно: хартбоксу назначается лэер - плэер хартбокс (5), а хитбоксу маска енемихартбокс (6)
## Дальше нам необхоидмо вернуться к коду и его написанию. На повестве дня сигнал соприкосновения коллизий хартбоксов с хитбоксами
## После чёртового внезапного переписывания половины кода игрока (спасибо автору) в результате получаем рабочую смерть и авто выход в меню, но теперь на повестке для корректное
## срабатываение атак противника. Для этого вечно присутствующую коллизию нужно заставить вызываться только в момент проигрывания анимации атаки.
## Сделали это мы благодаря отключению и включению свойства "disabled" у CollisionChape2D в HitBox грибочка. Привязываем ключями к кадрам анимации нужным и готово.
## Рабочую атаку игрока сделаем в следующем уроке, а пока сделаем полоску здоровья. Создаём крутую штуку в level в canvasLayer "TextureProgressBar" - заготовленная для авторских
## Полосок чего-то. Требует трёх текстур, с которыми можно потом поиграться. Если текстур нет есть его младший брат - обычный ProgressBar с базовым визуалом.
## Полоску сделали, теперь надо привязать его опустошение и наполнение к коду и здоровью игрока. Сделали в самом начале скрипта игрока новый сигнал. Далее проваливаемся в скрипт
## level'a и тыкаем на игрока, узлы и видим новый авторский узел. Прикольно
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
